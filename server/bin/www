#!/usr/bin/env node

/**
 * Module dependencies.
 */

const debug = require('debug')('server:server');
const http = require('http');
const io = require('socket.io')(http);
const app = require('../app');

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
  console.log(`Listening on ${bind}`);
}

/**
 * Listen on provided port, on all network interfaces.
 */

io.on('connection', (socket) => {
  console.log('a user connected');

  socket.on('create or join', (room) => {
    console.log('create or join to room ', room);

    const myRoom = io.sockets.adapter.rooms[room] || { length: 0 };
    const numClients = myRoom.length;

    console.log(room, ' has ', numClients, ' clients');

    if (numClients === 0) {
      socket.join(room);
      socket.emit('created', room);
    } else if (numClients === 1) {
      socket.join(room);
      socket.emit('joined', room);
    } else {
      socket.emit('full', room);
    }
  });

  socket.on('ready', (room) => {
    socket.broadcast.to(room).emit('ready');
  });

  socket.on('candidate', (event) => {
    socket.broadcast.to(event.room).emit('candidate', event);
  });

  socket.on('offer', (event) => {
    socket.broadcast.to(event.room).emit('offer', event.sdp);
  });

  socket.on('answer', (event) => {
    socket.broadcast.to(event.room).emit('answer', event.sdp);
  });
});

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
